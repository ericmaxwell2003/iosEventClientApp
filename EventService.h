
#import <Foundation/Foundation.h>
#import "LoginDto.h"
#import "RegistrationDto.h"


@interface EventService : NSObject

#define BASE_URL @"http://192.168.57.1:8080"

#define LOGIN @"/login"
#define REGISTER @"/register"
#define EVENTS @"/events"

#define EVENTS_CALL_COMPLETED_WITH_RESULT @"EVENTS_CALL_COMPLETED_WITH_RESULT"
#define EVENTS_CALL_FAILED_WITH_ERROR @"EVENTS_CALL_FAILED_WITH_ERROR"

/**
 *  Get a singleton instance of the service.
 */
+ (EventService *)sharedInstance;


/**
 *  Load events posts from the server.  This receiver will fire either a
 *  notification after the results have been fetched
 *  if SUCCESS ->
 *       EVENTS_CALL_COMPLETED_WITH_RESULT event - The object sent in the notitication is a Dictionary @{token: <token>, events: [<EventDto>]}
 *  if FAILURE ->
 *       EVENTS_CALL_FAILED_WITH_ERROR event - The object sent in the notfication is an NSError generated by the error.
 */
- (void)loadEventsFromServerUsingSyncToken:(NSString *)token;

/**
 *  Register with the events server.  This receiver will fire either
 *  if SUCCESS ->
 *       EVENTS_CALL_COMPLETED_WITH_RESULT RegistrationDto
 *  if FAILURE ->
 *       EVENTS_CALL_FAILED_WITH_ERROR event - The object sent in the notfication is an NSError generated by the error.
 */
- (void)registerWithRegistrationDto:(RegistrationDto *)registrationDto;

/**
 *  Login with the events server.  This receiver will fire either
 *  if SUCCESS ->
 *       EVENTS_CALL_COMPLETED_WITH_RESULT OauthTokenDto
 *  if FAILURE ->
 *       EVENTS_CALL_FAILED_WITH_ERROR event - The object sent in the notfication is an NSError generated by the error.
 */
- (void)loginUsingLoginDto:(LoginDto *)loginDto;



@end
